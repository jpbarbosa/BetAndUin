			/* We are now the main server, but we are not the default server. 
			 * (continue down there...)
			 * TODO: This situation might be cleaned up by some assumptions to be
			 *       given by the teacher later.
			 */
			
			else if(partnerAnswer.equals("OK")
					/* It means that our partner has crashed and is now returning to activity. */
					|| (partnerAnswer.equals("I_WILL_BE_PRIMARY_SERVER") && isPartnerDead)){
				
				/* (...continues from above)
				 * Therefore, we can't just send KEEP_ALIVE messages. If for any reason
				 * we have a failure in the link, the other server will eventually think
				 * it is the main server. When the link is reestablished, we shall
				 * eventually receive a KEEP_ALIVE and in that case, we ought 
				 */
				
				if (debugging){
					System.out.println("ConnectionWithServerManager: We fulfilled the second condition.");
				}
				
				isPrimaryServer = true;
				isPartnerDead = false;
				
				/* Informs that parent server about its status. */
				synchronized (statusLock){
					statusLock.setInitialProcessConcluded(true);
					statusLock.setPrimaryServer(true);
					if (statusLock.hasChangedStatus()){
						statusLock.notifyAll();
					}
				}
				
				/* We continue here while we don't get any KEEP_ALIVE message. */
				while(isPrimaryServer){
					/* Once we are simultaneously the main server and default server,
					 * we will only give up from that position if the server crashes.
					 * Consequently, we enter this endless cycle, always sending
					 * KEEP_ALIVE messages hoping the system does never fail.
					 */
					sendMessage("KEEP_ALIVE");
					
					try {
						Thread.sleep(Constants.KEEP_ALIVE_TIME);
					} catch (InterruptedException e) {
						/* We have received a message, what wasn't expected
						 * in a normal situation.
						 */
					}
					
					synchronized(msgToReceiveList){
						while (msgToReceiveList.listSize() > 0){
							partnerAnswer = msgToReceiveList.getMsg();
							if (partnerAnswer.equals("KEEP_ALIVE")){
								/* We give up from the primary server status. */
								isPrimaryServer = false;
								
								/*TODO: This may lead to bugs in the server, as we only wait if we
								 *      are the secondary server. If we are the primary server, this
								 *      notify is likely to be lost, but let's check it out later.
								 */
								
								/* Informs that parent server about its status. */
								synchronized (statusLock){
									statusLock.setPrimaryServer(false);
									if (statusLock.hasChangedStatus()){
										statusLock.notifyAll();
									}
								}
								
							}
							else if (partnerAnswer.equals("I_WILL_BE_PRIMARY_SERVER")){
								/* We notify the other server that we are already the
								 * primary server.
								 */
								sendMessage("I_M_ALREADY_PRIMARY_SERVER");
							}
						} // while (msgToReceiveList.listSize() > 0)
					} // synchronized(msgToReceiveList)
				}
			}